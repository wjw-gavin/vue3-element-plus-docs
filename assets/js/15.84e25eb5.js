(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{570:function(e,t,s){"use strict";s.r(t);var v=s(12),a=Object(v.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),s("p",[e._v("为什么要二次封装 select ？不知道你有没有这种感觉，如果一个页面有很多个 select 组件，你会写很多 el-select 和 el-option，再加上属性一多，整个页面的代码量噌的一下就变的巨多，这是我封装的初衷。")]),e._v(" "),s("h2",{attrs:{id:"部分功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#部分功能"}},[e._v("#")]),e._v(" 部分功能")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[e._v("更多功能逻辑请查看源代码~（props）")])]),s("ul",[s("li",[e._v("简化代码，每个需要 select 的地方，只需要一个标签 "),s("code",[e._v("<g-select />")]),e._v(" 外加绑定值和传入下拉的数据即可实现；")]),e._v(" "),s("li",[e._v("修改默认属性，比如："),s("code",[e._v("clearable")]),e._v(" 和 "),s("code",[e._v("filterable")]),e._v(" 等，我这里需要默认为true的，不然每个组件都要添加一遍；")]),e._v(" "),s("li",[e._v("可扩展，传入的数据格式默认为 "),s("code",[e._v("[{key: '111', value: '王二小'}]")]),e._v("，如果想要修改，比如是 id 和 name，传入"),s("code",[e._v("props=\"{key: 'id', value: 'name'}\"")]),e._v("；")]),e._v(" "),s("li",[s("code",[e._v("search-key")]),e._v("，传入该属性，会启用远程搜索，"),s("strong",[e._v("为什么是 "),s("code",[e._v("search-key")]),e._v("？")]),e._v("，因为我这里所有搜索接口都规范成 "),s("code",[e._v("/api/search/autocomplete/${search-key}")]),e._v("，所以哪种数据的下拉数据，传入该数据的搜索类型，如果不是这样，需要你去改造下组件了.")]),e._v(" "),s("li",[s("code",[e._v("value-key")]),e._v("，传入该属性，绑定数据为对象类型；")])])])}),[],!1,null,null,null);t.default=a.exports}}]);